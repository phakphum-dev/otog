version: '3.9'

x-minio-config: &x-minio-config
  MINIO_ROOT_USER: ${S3_ACCESS_KEY_ID}
  MINIO_ROOT_PASSWORD: ${S3_SECRET_ACCESS_KEY}
services:
  postgres:
    image: postgres:14
    container_name: otog-postgres
    restart: unless-stopped
    environment:
      PGPORT: ${DB_PORT}
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - ${DB_PORT}:${DB_PORT}
    volumes:
      - ./volumes/postgres:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DB_USERNAME}']
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - otog-network
  minio:
    image: minio/minio:RELEASE.2025-04-22T22-12-26Z
    ports:
      - '9000:9000'
      - '9001:9001'
    volumes:
      - ./volumes/minio:/data
    environment:
      <<: *x-minio-config
    command: server --console-address ":9001" /data
    networks:
      - otog-network
  create-bucket:
    image: minio/mc
    container_name: otog-create-bucket
    environment:
      <<: *x-minio-config
      S3_ENDPOINT_URL: http://minio:9000
      BUCKET_NAME: otog
    entrypoint: >
      bash -c '
      echo "[mc] Alias server" &&
      /usr/bin/mc alias set myminio $${S3_ENDPOINT_URL} $${MINIO_ROOT_USER} $${MINIO_ROOT_PASSWORD} &&

      echo "[mc] Create $${BUCKET_NAME} bucket" &&
      /usr/bin/mc mb myminio/$${BUCKET_NAME} --ignore-existing'
    depends_on:
      minio:
        condition: service_healthy
    networks:
      - otog-network

networks:
  otog-network:
    name: otog-network
