generator client {
  provider = "prisma-client-js"
  output   = "../__generated__/prisma-client"
}

generator zod {
  provider              = "zod-prisma"
  output                = "../__generated__/zod"
  relationModel         = "true"
  prismaJsonNullability = "false"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Announcement {
  id        Int      @id @default(autoincrement())
  value     Json?
  show      Boolean  @default(false)
  contestId Int?
  contest   Contest? @relation(fields: [contestId], references: [id])

  @@map("announcement")
}

model Chat {
  id           Int      @id @default(autoincrement())
  message      String   @db.VarChar(255)
  userId       Int
  creationDate DateTime @default(now()) @db.Timestamptz(6)
  updateDate   DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: NoAction)

  @@map("chat")
}

model Contest {
  id             Int                @id @default(autoincrement())
  name           String             @db.VarChar(255)
  mode           ContestMode
  gradingMode    ContestGradingMode
  timeStart      DateTime           @db.Timestamptz(6)
  timeEnd        DateTime           @db.Timestamptz(6)
  announce       String?            @db.VarChar(255)
  contestProblem ContestProblem[]
  userContest    UserContest[]
  announcements  Announcement[]

  @@map("contest")
}

model ContestProblem {
  contestId Int
  problemId Int
  contest   Contest @relation(fields: [contestId], references: [id], onDelete: Cascade)
  problem   Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@id([contestId, problemId])
  @@map("contestProblem")
}

model Problem {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(255)
  sname          String?          @db.VarChar(255)
  score          Int
  timeLimit      Int
  memoryLimit    Int
  show           Boolean
  recentShowTime DateTime?        @db.Timestamptz(6)
  case           String?          @db.VarChar(255)
  rating         Int?
  examples       Json?
  contestProblem ContestProblem[]
  submission     Submission[]

  @@map("problem")
}

model RefreshToken {
  id           String    @id @db.VarChar(255)
  userId       Int?
  jwtId        String?   @db.VarChar(255)
  used         Boolean?  @default(false)
  expiryDate   DateTime? @db.Timestamptz(6)
  creationDate DateTime  @default(now()) @db.Timestamptz(6)
  updateDate   DateTime  @default(now()) @updatedAt @db.Timestamptz(6)

  @@map("refreshToken")
}

model Submission {
  id           Int              @id @default(autoincrement())
  userId       Int
  problemId    Int
  result       String           @default("WAITING") @db.VarChar(255)
  score        Int?
  timeUsed     Int?
  memUsed      Int?
  status       SubmissionStatus
  errmsg       String?
  contestId    Int?
  sourceCode   String?
  language     String           @db.VarChar(255)
  creationDate DateTime         @default(now()) @db.Timestamptz(6)
  updateDate   DateTime         @default(now()) @updatedAt @db.Timestamptz(6)
  public       Boolean          @default(false)
  problem      Problem          @relation(fields: [problemId], references: [id], onDelete: Cascade)
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  fullResult   Json?

  @@map("submission")
}

model User {
  id           Int           @id @default(autoincrement())
  username     String        @unique @db.VarChar(255)
  showName     String        @unique @db.VarChar(255)
  email        String?       @unique @db.VarChar(255)
  password     String        @db.VarChar(255)
  role         UserRole
  rating       Int?
  creationDate DateTime      @default(now()) @db.Timestamptz(6)
  updateDate   DateTime      @default(now()) @updatedAt @db.Timestamptz(6)
  chat         Chat[]
  submission   Submission[]
  userContest  UserContest[]

  @@map("user")
}

model UserContest {
  userId            Int
  contestId         Int
  rank              Int?
  ratingAfterUpdate Int?
  contest           Contest @relation(fields: [contestId], references: [id], onDelete: Cascade)
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, contestId])
  @@map("userContest")
}

enum ContestGradingMode {
  acm
  classic

  @@map("enum_contest_gradingMode")
}

enum ContestMode {
  rated
  unrated

  @@map("enum_contest_mode")
}

enum SubmissionStatus {
  waiting
  grading
  accept
  reject
  compileError
  judgeError

  @@map("enum_submission_status")
}

enum UserRole {
  user
  admin

  @@map("enum_user_role")
}
